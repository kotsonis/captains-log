sudo: required
language: node_js
node_js:
  - "lts/*"
services: docker

deploy_service_job: &DEPLOY_SERVICE_JOB
  cache:
    directories:
      - node_modules
      - ${SERVICE_PATH}/node_modules

  install:
    - npm install -g serverless
    - travis_retry npm install
    - cd ${SERVICE_PATH}
    - travis_retry npm install
    - cd -


jobs:
  include:
    - <<: *DEPLOY_SERVICE_JOB
      name: "Deploy Backend API"
      env:
        - SERVICE_PATH="backend"
      script:
        - cd ${SERVICE_PATH}
        - serverless deploy -s ${TRAVIS_BRANCH}
        - cd -
    - name: "Deploy Frontend"
      env:
        - SERVICE_PATH="client"
      before_install:
        - docker -v && docker-compose -v
        - aws configure set default.region eu-central-1
        - curl -L https://goss.rocks/install | sudo sh

      install:
        - docker-compose -f docker-compose.yml build --parallel
      script:
        - dgoss run $DOCKER_USERNAME/captains-log-client

      after_success:
        - echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin ;
        - docker-compose -f docker-compose.yml push ;
        - fi
      deploy:
        provider: elasticbeanstalk
        region: eu-central-1
        app: captains-log-client-prebuilt$
        env: captains-log-env
        bucket-name: elasticbeanstalk-eu-central-1-$AWS_USER
        bucket-path: captains-log-client-prebuilt$
        on:
          branch: aws_deployment
        access_key_id: $AWS_ACCESS_KEY
        secret_access_key: $AWS_SECRET_KEY